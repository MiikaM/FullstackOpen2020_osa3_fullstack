{"version":3,"sources":["components/Filter.js","components/PersonsList.js","components/PersonsForm.js","services/persons.js","components/Notification.js","App.js","index.js"],"names":["Filter","name","handleFilter","value","onChange","Person","person","deleteThis","className","number","id","onClick","PersonsList","people","deletePerson","console","log","map","key","PersonsForm","handleName","handleNumber","handleSubmit","onSubmit","type","baseUrl","axios","get","then","response","data","newObject","post","put","delete","Notification","message","startsWith","App","useState","persons","setPersons","showAll","setShowAll","newName","setNewName","newNumber","setNewNumber","errorMesssage","setErrorMessage","useEffect","personService","initialPersons","personsToShow","filter","toUpperCase","event","target","preventDefault","find","n","trim","undefined","personObject","returnedPerson","concat","setTimeout","catch","error","window","confirm","changedPerson","updateNumber","removable","removed","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.517fd498.chunk.js","sourcesContent":["import React from 'react'\r\n\r\n/**\r\n * Creates the filter form and passes handling to App component\r\n * @param {name} name is the filter by which filter peoples\r\n * @param {handleFilter} handleFilter is the handler for the filtering\r\n */\r\nconst Filter = ({ name, handleFilter }) => {\r\n\r\n    return (\r\n        <form>\r\n            <div>\r\n                filter people with:\r\n                <input\r\n                    value={name}\r\n                    onChange={handleFilter}\r\n                />\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default Filter","import React from 'react'\r\n\r\n/**\r\n * Displays the list of people that are in the database\r\n * deletion handler is passed on to the App component\r\n */\r\n\r\n //Creates the person line with a delete button\r\nconst Person = ({ person, deleteThis }) => {\r\n    return (\r\n        <p className=\"person\">\r\n            {person.name} {person.number}\r\n            <button value={person.id} onClick={deleteThis}>delete</button>\r\n        </p>\r\n    )\r\n}\r\n\r\n//Passes each element individually to Person component\r\nconst PersonsList = ({ people, deletePerson }) => {\r\n    console.log('people are ', people)\r\n    return (\r\n        <div>\r\n            {\r\n                people.map(person =>\r\n                    <Person key={person.id} person={person} deleteThis={deletePerson} />\r\n                )}\r\n\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default PersonsList","import React from 'react'\r\n\r\n/**\r\n * Creates an adding form, from which you can add a person.\r\n * PersonsForm doesn't handle anything by itself only passes the handlers to App component\r\n * @param {name} name the name of the person which the user has written\r\n * @param {number} number  the number which the user has written\r\n * @param {handleName} handleName handler for name change\r\n * @param {handleNumber} handleNumber handler for number change\r\n * @param {handleSubmit} handleSubmit handler for submitting the information from the form\r\n */\r\nconst PersonsForm = ({ name, number, handleName, handleNumber, handleSubmit }) => {\r\n    return (\r\n        <form onSubmit={handleSubmit}>\r\n            <div>\r\n                name:\r\n                    <input\r\n                    value={name}\r\n                    onChange={handleName}\r\n                />\r\n            </div>\r\n            <div>\r\n                number:\r\n                    <input\r\n                    value={number}\r\n                    onChange={handleNumber}\r\n                />\r\n            </div>\r\n            <div>\r\n                <button type=\"submit\">Add</button>\r\n            </div>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default PersonsForm","import axios from 'axios'\r\nconst baseUrl = '/api/persons'\r\n\r\n/**\r\n * Get's and handles the interactions with the database\r\n */\r\n\r\nconst getAll = () => {\r\n    const request = axios.get(baseUrl)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst create = newObject => {\r\n    const request = axios.post(baseUrl, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst update = (id, newObject) => {\r\n    const request = axios.put(`${baseUrl}/${id}`, newObject)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nconst deleteObject = (id) => {\r\n    const request = axios.delete(`${baseUrl}/${id}`)\r\n    return request.then(response => response.data)\r\n}\r\n\r\nexport default { getAll, create, update, deleteObject}","import React from 'react'\r\n\r\n/**\r\n * Displays a notification with styles if the message is an error it uses error styles and if it's \r\n * a notification then it uses notification styles\r\n * @param {message} message is the message that tells what has happened \r\n */\r\nconst Notification = ({ message }) => {\r\n    if (message === null) {\r\n        return null\r\n    }\r\n\r\n    if (message.startsWith('Information')) {\r\n        return (\r\n            <div className='error'>\r\n                {message}\r\n            </div>\r\n        )\r\n    }\r\n\r\n    return (\r\n        <div className=\"notification\">\r\n            {message}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Notification","import React, { useState, useEffect } from 'react'\r\nimport Filter from './components/Filter'\r\nimport PersonsList from './components/PersonsList'\r\nimport PersonsForm from './components/PersonsForm'\r\nimport personService from './services/persons'\r\nimport Notification from './components/Notification'\r\n\r\n/**\r\n * App handles all the changes and passes on the changes to the database.\r\n * App also creates the base for the website.\r\n */\r\nconst App = () => {\r\n\r\n    /*Initializations */\r\n    const [persons, setPersons] = useState([])\r\n    const [showAll, setShowAll] = useState('')\r\n    const [newName, setNewName] = useState('')\r\n    const [newNumber, setNewNumber] = useState('')\r\n    const [errorMesssage, setErrorMessage] = useState(null)\r\n\r\n    /*Handlers for name/number change annd for filter*/\r\n    const handleNameChange = event => setNewName(event.target.value)\r\n    const handleNumberChange = event => setNewNumber(event.target.value)\r\n    const handleFilter = event => setShowAll(event.target.value)\r\n\r\n    useEffect(() => {\r\n        personService\r\n            .getAll()\r\n            .then(initialPersons => {\r\n                setPersons(initialPersons)\r\n            })\r\n    }, [])\r\n\r\n    /* Updating the number for the person*/\r\n    const updateNumber = ({ person }) => {\r\n        const id = person.id\r\n        const changedPerson = { ...person, number: newNumber.trim() }\r\n\r\n        personService\r\n            .update(id, changedPerson).then(returnedPerson => {\r\n                setPersons(persons.map(person => person.id !== id ? person : returnedPerson))\r\n                setNewName('')\r\n                setNewNumber('')\r\n                setErrorMessage(`${returnedPerson.name}'s number was updated`)\r\n                setTimeout(() => { setErrorMessage(null) }, 5000)\r\n\r\n            })\r\n            .catch(error => {\r\n                setErrorMessage(`Information of ${changedPerson.name} was already removed from the server`)\r\n                setTimeout(() => { setErrorMessage(null) }, 5000)\r\n                setNewName('')\r\n                setNewNumber('')\r\n                setPersons(persons.filter(n => n.id !== id))\r\n            })\r\n    }\r\n\r\n\r\n    /*Checks if the person is already in the database if not then adds the person */\r\n    const addAndCheckPerson = (event) => {\r\n        event.preventDefault()\r\n        \r\n        const person = persons.find(n => n.name === newName.trim())\r\n\r\n        if (person !== undefined) {\r\n            if (window.confirm(`${newName} is already added to phonebook, replace the old number with a new one?`)) {\r\n                updateNumber({ person })\r\n            }\r\n            return\r\n        }\r\n\r\n        const personObject = {\r\n            name: newName.trim(),\r\n            number: newNumber.trim(),\r\n        }\r\n\r\n        personService\r\n            .create(personObject)\r\n            .then(returnedPerson => {\r\n                setPersons(persons.concat(returnedPerson))\r\n                setNewName('')\r\n                setNewNumber('')\r\n                setErrorMessage(`Added ${returnedPerson.name} `)\r\n                setTimeout(() => { setErrorMessage(null) }, 5000)\r\n            }).catch(error => {\r\n                setErrorMessage(`Can't add a person with no name`)\r\n                setTimeout(() => { setErrorMessage(null) }, 5000)\r\n                setNewName('')\r\n                setNewNumber('')\r\n            })\r\n    }\r\n\r\n    /*Deleting the information of the person chosen */\r\n    const deletePerson = (event) => {\r\n        console.log('Eventti on', event.target.value)\r\n        const id = event.target.value\r\n        const removable = persons.find(n => n.id === id)\r\n\r\n        if (window.confirm(`Are you sure you want to remove ${removable.name} ?`)) {\r\n            personService\r\n                .deleteObject(id)\r\n                .then(removed => {\r\n                    setErrorMessage(`${removable.name} has been removed from the server`)\r\n                    setTimeout(() => { setErrorMessage(null) }, 2000)\r\n                    setPersons(persons.filter(n => n.id !== id))\r\n                })\r\n                .catch(error => {\r\n                    setErrorMessage(`Information of '${removable.name}' was already removed from server`)\r\n                    setTimeout(() => { setErrorMessage(null) }, 2000)\r\n                })\r\n\r\n        }\r\n    }\r\n    /*Creates the filtered list of persons */\r\n    const personsToShow = showAll === ''\r\n        ? persons\r\n        : persons.filter(person => person.name.toUpperCase().startsWith(showAll.toUpperCase()))\r\n\r\n    return (\r\n        <div>\r\n            <h2>Phonebook</h2>\r\n            <Notification message={errorMesssage} />\r\n            <Filter name={showAll} handleFilter={handleFilter} />\r\n            <h3>Add person</h3>\r\n            <PersonsForm name={newName} number={newNumber} handleName={handleNameChange} handleNumber={handleNumberChange} handleSubmit={addAndCheckPerson} />\r\n            <h3>Numbers</h3>\r\n            <PersonsList people={personsToShow} deletePerson={deletePerson} />\r\n        </div>\r\n    )\r\n\r\n}\r\n\r\nexport default App","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport './index.css'\n\nReactDOM.render(<App />, document.getElementById('root'))"],"sourceRoot":""}